{"version":3,"sources":["mediaAssets/Discord2.png","mediaAssets/header2.jpg","mediaAssets/logo.svg","helpers.js","common/Loading.js","list/Table.js","list/Pagination.js","list/List.js","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","handleResponse","response","json","then","ok","Promise","reject","Loading","react_default","a","createElement","className","Table","props","currencies","history","map","currency","key","id","onClick","push","concat","rank","name","price","marketCap","percent","percentChange24h","Pagination","page","totalPages","handlePaginationClick","disabled","List","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","error","bind","assertThisInitialized","fetchCurrencies","_this2","setState","fetch","data","catch","errorMessage","console","log","direction","_this3","nextPage","_this$state","src_common_Loading","src_list_Table","renderChangePercent","src_list_Pagination","React","Component","App","dist","blur","bgImage","header","bgImageAlt","strength","style","height","src","logo2","alt","href","target","rel","list_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3285711e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Discord2.05f1d976.png\";","module.exports = __webpack_public_path__ + \"static/media/header2.5c048f1c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n/**\r\n * Our  fetch error helper\r\n * @param {object} response \r\n */\r\nexport const handleResponse = (response) => {\r\n    return response.json().then(json => {\r\n        return response.ok ? json : Promise.reject(json);\r\n    });\r\n}\r\n\r\n\r\n/** \r\n * Render change percent helper\r\n * \r\n * refactor from class method to function\r\n * previously looked like when copied from list component:\r\n * renderChangePercent(percent) {\r\n * \r\n * @param {string} percent\r\n*/\r\nexport const renderChangePercent = (percent) => {\r\n    if (percent > 0) {\r\n        return <span className=\"percent-raised\">{percent}% &uarr;</span>\r\n    }\r\n    else if (percent < 0) {\r\n        return <span className=\"percent-fallen\">{percent}% &darr;</span>\r\n    }\r\n    else {\r\n        return <span>{percent}</span>\r\n    }\r\n}","import React from 'react';\r\nimport './Loading.css';\r\n\r\nconst Loading = () => {\r\n    return <div className=\"Loading\" />\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport {renderChangePercent} from '../helpers';\r\nimport PropTypes from 'prop-types';\r\nimport './Table.css';\r\n\r\n\r\nconst Table = (props) => {\r\n    const {currencies, history } = props;\r\n    return(\r\n    <div className=\"Table-Container\">\r\n        <table className=\"Table\">\r\n            <thead className=\"Table-Head\">\r\n                <tr>\r\n                    <th>CryptoCurrency</th>\r\n                    <th>Price</th>\r\n                    <th>Market Cap</th>\r\n                    <th>24H Change</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody className=\"Table-body\">\r\n                {currencies.map((currency) => (\r\n                    <tr \r\n                    key={currency.id}\r\n                    //onclick without calling at the beginning\r\n                    onClick={() => history.push(`/currency/${currency.id}`)}\r\n                    >\r\n                        <td>\r\n                            <span className=\"Table-rank\">{currency.rank}</span>\r\n                            {currency.name}\r\n                        </td>\r\n                        <td>\r\n                            <span className=\"Table-dollar\">$</span>\r\n                            {currency.price}\r\n                        </td>\r\n                        <td>\r\n                            <span className=\"Table-dollar\">$</span>\r\n                            {currency.marketCap}\r\n                        </td>\r\n                        <td>\r\n                            {renderChangePercent(currency.percentChange24h)}\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    );\r\n}\r\n\r\nTable.propTypes = {\r\n    currencies: PropTypes.array.isRequired,\r\n    history: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Table;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Pagination.css';\r\n\r\nconst Pagination = (props) => {\r\n\r\n    const { page, totalPages, handlePaginationClick } = props;\r\n\r\n    return (\r\n        <div className=\"Pagination\">\r\n            <button\r\n                className=\"Pagination-button\"\r\n                /**\r\n                 * handlePaginationClick('prev')\r\n                 * yeilds \r\n                 * TypeError: handlePaginationClick is not a function\r\n                 * \r\n                 * why? these functions will be called immidiately on load instad of onclick\r\n                 * and how do we add arguments?\r\n                 * one of two ways:\r\n                 * \r\n                 * how to solve? () => or example two\r\n                 */\r\n                onClick={() => handlePaginationClick('prev')}\r\n                disabled={page <= 1}\r\n            >\r\n                &larr;\r\n            </button>\r\n\r\n            <span className=\"Pagination-info\">\r\n                page <b>{page}</b> of <b>{totalPages}</b>\r\n            </span>\r\n\r\n            <button\r\n                className=\"Pagination-button\"\r\n                /**\r\n                * Example 2\r\n                * onClick={handlePaginationClick.bind(this, 'next')}\r\n                * but this doesnt seem to work as intended?\r\n                */\r\n                onClick={() => handlePaginationClick('next')}\r\n                disabled={page >= totalPages}\r\n            >\r\n                &rarr;\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nPagination.propTypes = {\r\n    totalPages: PropTypes.number.isRequired,\r\n    page: PropTypes.number.isRequired,\r\n    handlePaginationClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Pagination;","import React from 'react';\r\nimport { handleResponse } from '../helpers';\r\nimport { API_URL } from '../config';\r\nimport Loading from '../common/Loading';\r\nimport Table from './Table';\r\nimport Pagination from './Pagination';\r\n\r\nclass List extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            loading: false,\r\n            currencies: [],\r\n            error: null,\r\n            totalPages: 0,\r\n            page: 1,\r\n        };\r\n\r\n        this.handlePaginationClick = this.handlePaginationClick.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchCurrencies();\r\n    }\r\n\r\n    fetchCurrencies(){\r\n        this.setState({ loading: true })\r\n\r\n        const { page } = this.state;\r\n\r\n        fetch(`${API_URL}/cryptocurrencies?page=${page}&perPage=20`)\r\n            .then(handleResponse)\r\n            .then((data) => {\r\n                //console.log('Success', data);\r\n                const {currencies, totalPages} = data;\r\n\r\n                this.setState({\r\n                    currencies,\r\n                    totalPages,\r\n                    loading: false\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    error: error.errorMessage,\r\n                    loading: false\r\n                })\r\n                console.log('Error', error);\r\n            });\r\n    }\r\n\r\n    handlePaginationClick(direction){ \r\n        //this is undelcated here use handlePaginationClick = (direction) => { or the way we do now\r\n        let nextPage = this.state.page;\r\n        /**\r\n        if (direction === 'next'){\r\n            nextPage++;\r\n        }\r\n        else{\r\n            nextPage--;\r\n        }\r\n        */\r\n        //increment if next otherwise decrememnt\r\n        nextPage = direction === 'next' ? nextPage + 1 : nextPage - 1;\r\n        this.setState({page: nextPage}, () => {\r\n            this.fetchCurrencies();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        //console.log(this.state);\r\n        const { loading, error, currencies, page, totalPages } = this.state;\r\n        /** \r\n         * const loading = this.state.loading;\r\n         * const error = this.state.error;\r\n         * const currencies = this.state.currencies;\r\n        */\r\n\r\n\r\n        //Render only loading component, if loading state is set to true\r\n        if (loading) {\r\n            return <div className=\"loading-container\"><Loading /></div>\r\n        }\r\n        //render error message if error occured while fetching data\r\n        if (error) {\r\n            return <div className=\"error\">{error}</div>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Table\r\n                    currencies={currencies}\r\n                    renderChangePercent={this.renderChangePercent}\r\n                />\r\n                <Pagination\r\n                    page={page}\r\n                    totalPages={totalPages}\r\n                    handlePaginationClick={this.handlePaginationClick}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;","/**\r\n * API Root Url\r\n */\r\nexport const API_URL = 'https://api.udilia.com/coins/v1';","import React, { Component } from 'react';\n/**\n * packages\n */\n\nimport AutoScale from 'react-auto-scale'; //TODO Remove\nimport { Parallax, Background } from 'react-parallax';\nimport logo from './mediaAssets/logo.svg';\nimport logo2 from './mediaAssets/Discord2.png';\nimport header from './mediaAssets/header2.jpg';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport List from './list/List.js';\n/**\n * css\n */\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        <div className=\"Header-image\">\n          <div className=\"unselectable\">\n            <Parallax blur={0} bgImage={header} bgImageAlt=\"image\" strength={700}>\n            <div style={{ height: '500px' }} />\n            <div className=\"Header-text-title\">\n              <div className=\"fancy\">\n                <span>\n                  James Ly\n                </span>\n              </div>\n            </div>\n            <div className=\"Header-text-subtext\">\n              🎓 2018 Graduate of RyersonU<br />\n              👏 Filler text\n            </div>\n            </Parallax>\n\n          </div>\n        </div>\n        docstart\n        <header className=\"App-header\">\n          <img src={logo2} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            James Ly's website. First Commit.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <List />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}